AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a VPC with public subnet, S3 bucket, parameters and secrets for the gfe-db application

Parameters:
  Stage:
    Type: String
    Description: Stage of production
  AppName:
    Type: String
  createVpc:
    Type: String
    AllowedValues:
      - "true"
      - "false"
  usePrivateSubnet:
    Type: String
    AllowedValues:
      - "true"
      - "false"
  AdminEmail:
    Type: String
  DataBucketName:
    Type: String
  VpcId:
    Type: String
    Description: Required if createVpc is false
  PublicSubnetId:
    Type: String
    Description: Required if createVpc is false
  PrivateSubnetId:
    Type: String
    Description: Required if createVpc is false
  GitHubPersonalAccessToken:
    Type: String
    NoEcho: true
  
Conditions:
  # Important: All stacks (infra, database, pipeline) should use the same conditions
  CreateVpc: !Equals [!Ref createVpc, 'true']
  CreateVpcPublic: !And [!Equals [!Ref createVpc, 'true'], !Equals [!Ref usePrivateSubnet, 'false']]
  CreateVpcPrivate: !And [!Equals [!Ref createVpc, 'true'], !Equals [!Ref usePrivateSubnet, 'true']]
  UseExternalVpc: !Equals [!Ref createVpc, 'false']
  UseExternalVpcPublic: !And [!Equals [!Ref createVpc, 'false'], !Equals [!Ref usePrivateSubnet, 'false']]
  UseExternalVpcPrivate: !And [!Equals [!Ref createVpc, 'false'], !Equals [!Ref usePrivateSubnet, 'true']]
  UsePrivateSubnet: !Equals [!Ref usePrivateSubnet, 'true']
  UsePublicSubnet: !Equals [!Ref usePrivateSubnet, 'false']

Mappings:
  # AvailabilityZoneMap defines availability zones where an m5d.xlarge instance is available (used for Neo4j server).
  AvailabilityZoneMap:
    us-east-1:
      AvailabilityZone: us-east-1a
    us-east-2:
      AvailabilityZone: us-east-2a
    us-west-1:
      AvailabilityZone: us-west-1a
    eu-central-1:
      AvailabilityZone: eu-central-1a
    eu-west-1:
      AvailabilityZone: eu-west-1a
    eu-west-2:
      AvailabilityZone: eu-west-2a
    eu-west-3:
      AvailabilityZone: eu-west-3a

Resources:

  StageParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Stage'
      Description: "Stage of production"
      Value: !Ref Stage

  AppParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/AppName'
      Description: "Name of application"
      Value: !Ref AppName

  CreateVpcParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/CreateVpc'
      Description: !Sub "True if stack creates a VPC, false if stack uses an existing VPC"
      Value: !Ref createVpc

  CreateVpcConditionVpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-${AppName}-${AWS::Region}-vpc'
  
  CreateVpcConditionPublicSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref CreateVpcConditionVpc
      AvailabilityZone: !FindInMap [AvailabilityZoneMap, !Ref AWS::Region, AvailabilityZone]
      MapPublicIpOnLaunch: true
  
  CreateVpcPrivateConditionPrivateSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcPrivate
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref CreateVpcConditionVpc
      AvailabilityZone: !GetAtt CreateVpcConditionPublicSubnet.AvailabilityZone
  
  CreateVpcConditionInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpc
  
  CreateVpcConditionPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpc
    Properties:
      VpcId: !Ref CreateVpcConditionVpc
  
  CreateVpcPrivateConditionPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpcPrivate
    Properties:
      VpcId: !Ref CreateVpcConditionVpc
  
  CreateVpcConditionVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpc
    Properties:
      VpcId: !Ref CreateVpcConditionVpc
      InternetGatewayId: !Ref CreateVpcConditionInternetGateway
  
  CreateVpcConditionPublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpc
    DependsOn:
      - CreateVpcConditionInternetGateway
      - CreateVpcConditionVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref CreateVpcConditionPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CreateVpcConditionInternetGateway
  
  # # No default route is required because the private subnet is not connected to the internet
  # # AWS automatically updates the route table for VPC endpoints for S3, SSM and SecretsManager
  # CreateVpcPrivateConditionPrivateRoute:
  #   Type: AWS::EC2::Route
  #   Condition: CreateVpcPrivate
  #   Properties:
  #     RouteTableId: !Ref CreateVpcPrivateConditionPrivateRouteTable
  #     # DestinationCidrBlock: 0.0.0.0/0 # Not required for private subnet
  
  CreateVpcConditionPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      RouteTableId: !Ref CreateVpcConditionPublicRouteTable
      SubnetId: !Ref CreateVpcConditionPublicSubnet
  
  CreateVpcPrivateConditionPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcPrivate
    Properties:
      RouteTableId: !Ref CreateVpcPrivateConditionPrivateRouteTable
      SubnetId: !Ref CreateVpcPrivateConditionPrivateSubnet
  
  CreateVpcConditionVpcIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/VpcId'
      Description: !Sub "Name of VPC network for ${AppName}"
      Value: !Ref CreateVpcConditionVpc
  
  CreateVpcConditionPublicSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/PublicSubnetId'
      Description: !Sub "Public Subnet for the ${AppName} Neo4j server"
      Value: !Ref CreateVpcConditionPublicSubnet
  
  CreateVpcPrivateConditionPrivateSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpcPrivate
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/PrivateSubnetId'
      Description: !Sub "Private Subnet for the ${AppName} Neo4j server"
      Value: !Ref CreateVpcPrivateConditionPrivateSubnet
  
  CreateVpcPublicConditionNeo4jSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpcPublic
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jSubnetId'
      Description: !Sub "Public Subnet for the ${AppName} Neo4j server"
      Value: !Ref CreateVpcConditionPublicSubnet
  
  CreateVpcPrivateConditionNeo4jSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpcPrivate
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jSubnetId'
      Description: !Sub "Public Subnet for the ${AppName} Neo4j server"
      Value: !Ref CreateVpcPrivateConditionPrivateSubnet
  
  UseExternalVpcConditionVpcIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExternalVpc
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/VpcId'
      Description: !Sub "Name of VPC network for ${AppName}"
      Value: !Ref VpcId
  
  UseExternalVpcConditionPublicSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExternalVpc
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/PublicSubnetId'
      Description: !Sub "Public Subnet for the ${AppName} Neo4j server"
      Value: !Ref PublicSubnetId
  
  UseExternalVpcPrivateConditionPrivateSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExternalVpcPrivate
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/PrivateSubnetId'
      Description: !Sub "Private Subnet for the ${AppName} Neo4j server"
      Value: !Ref PrivateSubnetId
  
  UseExternalVpcPrivateConditionNeo4jSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExternalVpcPrivate
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jSubnetId'
      Description: !Sub "Private Subnet for the ${AppName} Neo4j server"
      Value: !Ref PrivateSubnetId
  
  UseExternalVpcPublicConditionNeo4jSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExternalVpcPublic
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jSubnetId'
      Description: !Sub "Public Subnet for the ${AppName} Neo4j server"
      Value: !Ref PublicSubnetId
  
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DataBucketName

  DataBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/DataBucketName'
      Description: "Name of gfe-db data bucket"
      Value: !Ref DataBucket
  
  DataBucketArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/DataBucketArn'
      Description: "ARN of gfe-db data bucket"
      Value: !GetAtt DataBucket.Arn
  
  DataBucketRegionalDomainNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/DataBucketRegionalDomainName'
      Description: "S3 Bucket Regional Domain name for application bucket"
      Value: !GetAtt DataBucket.RegionalDomainName
  
  UseExternalVpcConditionNeo4jDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: UseExternalVpc
    Properties:
      GroupName: !Sub '${Stage}-${AppName}-neo4j-sg'
      GroupDescription: Security group for the GFE database
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: HTTP access for SSL certificate creation (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
          Description: HTTPs access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7474
          IpProtocol: tcp
          ToPort: 7474
          Description: Neo4j HTTP access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7473
          IpProtocol: tcp
          ToPort: 7473
          Description: Neo4j HTTPS access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7687
          IpProtocol: tcp
          ToPort: 7687
          Description: Neo4j Bolt driver access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
          Description: Update IP to use MyIP
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-${AppName}-neo4j-sg'
  
  CreateVpcConditionNeo4jDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateVpc
    Properties:
      GroupName: !Sub '${Stage}-${AppName}-neo4j-sg'
      GroupDescription: Security group for the GFE database
      VpcId: !Ref CreateVpcConditionVpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: HTTP access for SSL certificate creation (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
          Description: HTTPs access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7474
          IpProtocol: tcp
          ToPort: 7474
          Description: Neo4j HTTP access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7473
          IpProtocol: tcp
          ToPort: 7473
          Description: Neo4j HTTPS access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7687
          IpProtocol: tcp
          ToPort: 7687
          Description: Neo4j Bolt driver access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
          Description: Update IP to use MyIP
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-${AppName}-neo4j-sg'

  UseExternalVpcConditionNeo4jDatabaseSecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExternalVpc
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseSecurityGroupId'
      Description: "Name of the Neo4jDatabaseSecurityGroup"
      Value: !Ref UseExternalVpcConditionNeo4jDatabaseSecurityGroup

  CreateVpcConditionNeo4jDatabaseSecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseSecurityGroupId'
      Description: "Name of the Neo4jDatabaseSecurityGroup"
      Value: !Ref CreateVpcConditionNeo4jDatabaseSecurityGroup

  GitHubPersonalAccessTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AppName}-${Stage}-GitHubPersonalAccessToken"
      Description: GitHub Personal Access Token for repository access
      SecretString: !Sub '{"personal_access_token":"${GitHubPersonalAccessToken}"}'

  UsePublicSubnetConditionNeo4jDatabaseElasticIp:
    Type: AWS::EC2::EIP
    Condition: UsePublicSubnet
    Properties:
      Domain: vpc

  UsePublicSubnetConditionNeo4jDatabaseEndpointParameter:
    Type: AWS::SSM::Parameter
    Condition: UsePublicSubnet
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseEndpoint'
      Description: !Sub 'Endpoint for ${AppName} Neo4j server'
      Value: !Ref UsePublicSubnetConditionNeo4jDatabaseElasticIp

  UsePublicSubnetConditionNeo4jDatabaseEndpointAllocationIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UsePublicSubnet
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseEndpointAllocationId'
      Description: !Sub 'AllocationId for ${AppName} Neo4j server static IP'
      Value: !GetAtt UsePublicSubnetConditionNeo4jDatabaseElasticIp.AllocationId

  DataPipelineErrorsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DataPipelineErrorsTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: sns:Publish
            Resource: !Ref DataPipelineErrorsTopic
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  DataPipelineErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AppName} Data Pipeline Errors"
      Subscription:
        - Endpoint: !Ref AdminEmail
          Protocol: email

  DataPipelineErrorsTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/DataPipelineErrorsTopicArn'
      Description: !Sub 'ARN for ${AppName} Data Pipeline Errors SNS topic'
      Value: !Ref DataPipelineErrorsTopic

  DataPipelineExecutionTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DataPipelineExecutionTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: sns:Publish
            Resource: !Ref DataPipelineExecutionTopic
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  DataPipelineExecutionTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AppName} Data Pipeline Errors"
      Subscription:
        - Endpoint: !Ref AdminEmail
          Protocol: email

  DataPipelineExecutionTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/DataPipelineExecutionTopicArn'
      Description: !Sub 'ARN for ${AppName} Data Pipeline Errors SNS topic'
      Value: !Ref DataPipelineExecutionTopic

# Outputs:
#   UsePublicSubnetConditionNeo4jDatabaseElasticIp:
#     Description: "Elastic IP for gfe-db Neo4j database instance"
#     Value: !Ref UsePublicSubnetConditionNeo4jDatabaseElasticIp
#     Export:
#       Name: !Sub "${AppName}-${Stage}-UsePublicSubnetConditionNeo4jDatabaseElasticIp"