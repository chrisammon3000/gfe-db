AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a VPC with public subnet, S3 bucket, parameters and secrets for the gfe-db application

Parameters:
  Stage:
    Type: String
    Description: Stage of production
  AppName:
    Type: String
  createVpc:
    Type: String
  usePrivateSubnet:
    Type: String
  # Requires validation of existing VPC endpoint
  SsmVpcEndpointId:
    Type: String
    Default: ""
  # Requires validation of existing VPC endpoint
  SecretsManagerVpcEndpointId:
    Type: String
    Default: ""
  VpcId:
    Type: String
    Description: Vpc ID if using an external VPC
    Default: ""
    # AllowedPattern:
  PublicSubnetId:
    Type: String
    Description: Required if VpcId is set
    Default: ""
    # AllowedPattern:
  PrivateSubnetId:
    Type: String
    Description: Required if VpcId is set
    Default: ""
    # AllowedPattern:
  AdminEmail:
    Type: String
  DataBucketName:
    Type: String
  GitHubPersonalAccessToken:
    Type: String
    NoEcho: true

Conditions:
  # Determines whether to create a VPC or use an existing VPC
  CreateVpc: !Equals [!Ref createVpc, "true"]

  # TODO update: createVpc is false and VpcId and PublicSubnetId are not empty
  UseExistingVpc: !Equals [!Ref createVpc, "false"]

  CreateSsmVpcEndpoint: !Equals [!Ref SsmVpcEndpointId, ""]
  CreateSecretsManagerVpcEndpoint: !Equals [!Ref SecretsManagerVpcEndpointId, ""]

  # Determines whether Neo4j will use a private or public subnet
  UsePrivateSubnet: !Equals [!Ref usePrivateSubnet, "true"]
  UsePublicSubnet: !Equals [!Ref usePrivateSubnet, "false"]

  # Determines whether to create a VPC and use a private or public subnet for Neo4j
  CreateAndUsePrivateSubnet:
    !And [!Condition CreateVpc, !Condition UsePrivateSubnet]
  # CreateAndUsePublicSubnet: !And [ !Condition CreateVpc, !Condition UsePublicSubnet ] # A created or existing public subnet is always used for Batch

  # TODO update: PrivateSubnetId is not empty
  UseExistingPrivateSubnet:
    !And [!Condition UseExistingVpc, !Condition UsePrivateSubnet]
  # UseExistingPublicSubnet: !And [ !Condition UseExistingVpc, !Condition UsePublicSubnet ] # A created or existing public subnet is always used for Batch

  # Determines how to create VPC endpoints for SSM and Secrets Manager, which also depends on whether they already exist
  UseExistingPrivateSubnetWithSsmEndpoint: !And
    - !Condition UseExistingPrivateSubnet
    - !Condition CreateSsmVpcEndpoint # Ref to PrivateSubnetId parameter
  UseExistingPrivateSubnetWithSecretsManagerEndpoint: !And
    - !Condition UseExistingPrivateSubnet
    - !Condition CreateSecretsManagerVpcEndpoint # Ref to PrivateSubnetId parameter
  UseExistingPrivateSubnetWithVpcEndpoints: !And
    - !Condition UseExistingPrivateSubnet
    - !Condition CreateSsmVpcEndpoint # Ref to PrivateSubnetId parameter
    - !Condition CreateSecretsManagerVpcEndpoint # Ref to PrivateSubnetId parameter

Mappings:
  # AvailabilityZoneMap defines availability zones where an m5d.xlarge instance is available (used for Neo4j server).
  AvailabilityZoneMap:
    us-east-1:
      AvailabilityZone: us-east-1a
    us-east-2:
      AvailabilityZone: us-east-2a
    us-west-1:
      AvailabilityZone: us-west-1a
    eu-central-1:
      AvailabilityZone: eu-central-1a
    eu-west-1:
      AvailabilityZone: eu-west-1a
    eu-west-2:
      AvailabilityZone: eu-west-2a
    eu-west-3:
      AvailabilityZone: eu-west-3a

Resources:
  StageParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/Stage"
      Description: "Stage of production"
      Value: !Ref Stage

  AppParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/AppName"
      Description: "Name of application"
      Value: !Ref AppName

  # CreateVpcParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Type: String
  #     Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/CreateVpcCondition'
  #     Description: !Sub "True if stack creates a VPC, false if stack uses an existing VPC"
  #     Value: !Ref createVpc

  # UsePrivateSubnetParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Type: String
  #     Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/UsePrivateSubnetCondition'
  #     Description: !Sub "true if Neo4j will use a private subnet, false if Neo4j will use a public subnet"
  #     Value: !Ref usePrivateSubnet

  CreateVpcConditionVpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Stage}-${AppName}-${AWS::Region}-vpc"

  CreateVpcConditionVpcIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/VpcID"
      Description: !Sub "Name of VPC network for ${AppName}"
      Value: !Ref CreateVpcConditionVpc

  CreateVpcConditionPublicSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref CreateVpcConditionVpc
      AvailabilityZone:
        !FindInMap [AvailabilityZoneMap, !Ref AWS::Region, AvailabilityZone]
      MapPublicIpOnLaunch: true

  CreateVpcConditionPublicSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/PublicSubnetId"
      Description: !Sub "Public Subnet for the ${AppName} Neo4j server"
      Value: !Ref CreateVpcConditionPublicSubnet

  UseExistingVpcConditionPublicSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExistingVpc
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/PublicSubnetId"
      Description: !Sub "Public Subnet for the ${AppName} Neo4j server"
      Value: !Ref PublicSubnetId

  CreateVpcConditionInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpc

  CreateVpcConditionPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpc
    Properties:
      VpcId: !Ref CreateVpcConditionVpc

  CreateVpcConditionVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpc
    Properties:
      VpcId: !Ref CreateVpcConditionVpc
      InternetGatewayId: !Ref CreateVpcConditionInternetGateway

  CreateVpcConditionPublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpc
    DependsOn:
      - CreateVpcConditionInternetGateway
      - CreateVpcConditionVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref CreateVpcConditionPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CreateVpcConditionInternetGateway

  CreateVpcConditionPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      RouteTableId: !Ref CreateVpcConditionPublicRouteTable
      SubnetId: !Ref CreateVpcConditionPublicSubnet

  CreateAndUsePrivateSubnetConditionPrivateSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateAndUsePrivateSubnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref CreateVpcConditionVpc
      AvailabilityZone:
        !FindInMap [AvailabilityZoneMap, !Ref AWS::Region, AvailabilityZone]

  CreateAndUsePrivateSubnetConditionPrivateSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateAndUsePrivateSubnet
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/PrivateSubnetId"
      Description: !Sub "Private Subnet for the ${AppName} Neo4j server"
      Value: !Ref CreateAndUsePrivateSubnetConditionPrivateSubnet

  UseExistingPrivateSubnetConditionPrivateSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExistingPrivateSubnet
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/PrivateSubnetId"
      Description: !Sub "Private Subnet for the ${AppName} Neo4j server"
      Value: !Ref PrivateSubnetId

  # Endpoints are required for VPC Lambda to connect to AWS services using SDKs
  # Private DNS must be enabled which means there can only be one VPC endpoint per service
  UseExistingPrivateSubnetWithSsmEndpointConditionSsmVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: UseExistingPrivateSubnetWithSsmEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      # SecurityGroupIds:
      #   - !Ref Neo4jDatabaseSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnetId
      PrivateDnsEnabled: true

  # Endpoints are required for VPC Lambda to connect to AWS services using SDKs
  # Private DNS must be enabled which means there can only be one VPC endpoint per service
  UseExistingPrivateSubnetWithVpcEndpointsConditionSsmVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: UseExistingPrivateSubnetWithVpcEndpoints
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      # SecurityGroupIds:
      #   - !Ref Neo4jDatabaseSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnetId
      PrivateDnsEnabled: true

  # Endpoints are required for VPC Lambda to connect to AWS services using SDKs
  # Private DNS must be enabled which means there can only be one VPC endpoint per service
  CreateAndUsePrivateSubnetConditionSsmVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateAndUsePrivateSubnet
    Properties:
      VpcId: !Ref CreateVpcConditionVpc
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      # SecurityGroupIds:
      #   - !Ref Neo4jDatabaseSecurityGroup
      SubnetIds:
        - !Ref CreateAndUsePrivateSubnetConditionPrivateSubnet
      PrivateDnsEnabled: true

  # Endpoints are required for VPC Lambda to connect to AWS services using SDKs
  # Private DNS must be enabled which means there can only be one VPC endpoint per service
  UseExistingPrivateSubnetWithSecretsManagerEndpointConditionSecretsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: UseExistingPrivateSubnetWithSecretsManagerEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      # SecurityGroupIds:
      #   - !Ref Neo4jDatabaseSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnetId
      PrivateDnsEnabled: true

  # Endpoints are required for VPC Lambda to connect to AWS services using SDKs
  # Private DNS must be enabled which means there can only be one VPC endpoint per service
  UseExistingPrivateSubnetWithVpcEndpointsConditionSecretsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: UseExistingPrivateSubnetWithVpcEndpoints
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      # SecurityGroupIds:
      #   - !Ref Neo4jDatabaseSecurityGroup
      SubnetIds:
        - !Ref PrivateSubnetId
      PrivateDnsEnabled: true

  # Endpoints are required for VPC Lambda to connect to AWS services using SDKs
  # Private DNS must be enabled which means there can only be one VPC endpoint per service
  CreateAndUsePrivateSubnetConditionSecretsVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateAndUsePrivateSubnet
    Properties:
      VpcId: !Ref CreateVpcConditionVpc
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      # SecurityGroupIds:
      #   - !Ref Neo4jDatabaseSecurityGroup
      SubnetIds:
        - !Ref CreateAndUsePrivateSubnetConditionPrivateSubnet
      PrivateDnsEnabled: true

  UseExistingVpcConditionVpcIDParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExistingVpc
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/VpcID"
      Description: !Sub "Name of VPC network for ${AppName}"
      Value: !Ref VpcId

  UseExistingVpcConditionPublicSubnetIDParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExistingVpc
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/PublicSubnetID"
      Description: !Sub "Public Subnet for the ${AppName} Neo4j server"
      Value: !Ref PublicSubnetId

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DataBucketName

  DataBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataBucketName"
      Description: "Name of gfe-db data bucket"
      Value: !Ref DataBucket

  DataBucketArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataBucketArn"
      Description: "ARN of gfe-db data bucket"
      Value: !GetAtt DataBucket.Arn

  DataBucketRegionalDomainNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataBucketRegionalDomainName"
      Description: "S3 Bucket Regional Domain name for application bucket"
      Value: !GetAtt DataBucket.RegionalDomainName

  GitHubPersonalAccessTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AppName}-${Stage}-GitHubPersonalAccessToken"
      Description: GitHub Personal Access Token for repository access
      SecretString: !Sub '{"personal_access_token":"${GitHubPersonalAccessToken}"}'
      # TODO remove
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: AppName
          Value: !Ref AppName

  # These are created only if a public subnet is used for Neo4j
  UsePublicSubnetConditionNeo4jDatabaseElasticIp:
    Type: AWS::EC2::EIP
    Condition: UsePublicSubnet
    Properties:
      Domain: vpc

  UsePublicSubnetConditionNeo4jDatabaseEndpointParameter:
    Type: AWS::SSM::Parameter
    Condition: UsePublicSubnet
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseEndpoint"
      Description: !Sub "Endpoint for ${AppName} Neo4j server"
      Value: !Ref UsePublicSubnetConditionNeo4jDatabaseElasticIp

  UsePublicSubnetConditionNeo4jDatabaseEndpointAllocationIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UsePublicSubnet
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseEndpointAllocationId"
      Description: !Sub "AllocationId for ${AppName} Neo4j server static IP"
      Value: !GetAtt UsePublicSubnetConditionNeo4jDatabaseElasticIp.AllocationId

  CreateVpcConditionNeo4jDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateVpc
    Properties:
      GroupName: !Sub '${Stage}-${AppName}-neo4j-sg'
      GroupDescription: Security group for the GFE database
      VpcId: !Ref CreateVpcConditionVpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: HTTP access for SSL certificate creation (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
          Description: HTTPs access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7474
          IpProtocol: tcp
          ToPort: 7474
          Description: Neo4j HTTP access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7473
          IpProtocol: tcp
          ToPort: 7473
          Description: Neo4j HTTPS access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7687
          IpProtocol: tcp
          ToPort: 7687
          Description: Neo4j Bolt driver access (required)
        # - CidrIp: 0.0.0.0/0
        #   FromPort: 22
        #   IpProtocol: tcp
        #   ToPort: 22
        #   Description: Update IP to use MyIP
      # TODO remove
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-${AppName}-neo4j-sg'

  CreateVpcConditionNeo4jDatabaseSecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseSecurityGroupId'
      Description: "ID of the Neo4jDatabaseSecurityGroup"
      Value: !Ref CreateVpcConditionNeo4jDatabaseSecurityGroup

  UseExistingVpcConditionNeo4jDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: UseExistingVpc
    Properties:
      GroupName: !Sub '${Stage}-${AppName}-neo4j-sg'
      GroupDescription: Security group for the GFE database
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: HTTP access for SSL certificate creation (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
          Description: HTTPs access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7474
          IpProtocol: tcp
          ToPort: 7474
          Description: Neo4j HTTP access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7473
          IpProtocol: tcp
          ToPort: 7473
          Description: Neo4j HTTPS access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7687
          IpProtocol: tcp
          ToPort: 7687
          Description: Neo4j Bolt driver access (required)
        # - CidrIp: 0.0.0.0/0
        #   FromPort: 22
        #   IpProtocol: tcp
        #   ToPort: 22
        #   Description: Update IP to use MyIP
      # TODO remove
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-${AppName}-neo4j-sg'

  UseExistingVpcConditionNeo4jDatabaseSecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Condition: UseExistingVpc
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseSecurityGroupId'
      Description: "ID of the Neo4jDatabaseSecurityGroup"
      Value: !Ref UseExistingVpcConditionNeo4jDatabaseSecurityGroup

  DataPipelineErrorsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DataPipelineErrorsTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: sns:Publish
            Resource: !Ref DataPipelineErrorsTopic
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  DataPipelineErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AppName} Data Pipeline Errors"
      Subscription:
        - Endpoint: !Ref AdminEmail
          Protocol: email
      # TODO remove
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: AppName
          Value: !Ref AppName

  DataPipelineErrorsTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataPipelineErrorsTopicArn"
      Description: !Sub "ARN for ${AppName} Data Pipeline Errors SNS topic"
      Value: !Ref DataPipelineErrorsTopic

  DataPipelineExecutionTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DataPipelineExecutionTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: sns:Publish
            Resource: !Ref DataPipelineExecutionTopic
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  DataPipelineExecutionTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AppName} Data Pipeline Errors"
      Subscription:
        - Endpoint: !Ref AdminEmail
          Protocol: email
      # TODO remove
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: AppName
          Value: !Ref AppName

  DataPipelineExecutionTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataPipelineExecutionTopicArn"
      Description: !Sub "ARN for ${AppName} Data Pipeline Errors SNS topic"
      Value: !Ref DataPipelineExecutionTopic
# Outputs:
#   UsePublicSubnetConditionNeo4jDatabaseElasticIp:
#     Description: "Elastic IP for gfe-db Neo4j database instance"
#     Value: !Ref UsePublicSubnetConditionNeo4jDatabaseElasticIp
#     Export:
#       Name: !Sub "${AppName}-${Stage}-Neo4jDatabaseElasticIp"
