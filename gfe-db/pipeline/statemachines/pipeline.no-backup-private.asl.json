{
    "StartAt": "Pre-Execution Validation Query",
    "States": {
        "Pre-Execution Validation Query": {
            "Type": "Task",
            "Resource": "${ExecuteValidationQueriesFunctionArn}",
            "ResultPath": "$.validations.queries.pre",
            "Next": "Build Stage"
        },
        "Build Stage": {
            "Type": "Map",
            "Next": "Load Stage",
            "MaxConcurrency": 0,
            "ItemsPath": "$.input",
            "ItemSelector": {
                "input.$": "$$.Map.Item.Value"
            },
            "ResultPath": "$.validations.build",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "Execution Failed"
                }
            ],
            "ItemProcessor": {
                "StartAt": "Check Existing Build",
                "States": {
                    "Check Existing Build": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::aws-sdk:s3:listObjects",
                        "Parameters": {
                            "Bucket": "${DataBucketName}",
                            "Prefix.$": "States.Format('data/{}/csv/', $.input.RELEASES)"
                        },
                        "ResultPath": "$.check_existing_build",
                        "Next": "Files Exist?"
                    },
                    "Files Exist?": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.check_existing_build.Contents",
                                "IsPresent": false,
                                "Next": "Generate CSV files"
                            }
                        ],
                        "Default": "Use Existing Build?"
                    },
                    "Use Existing Build?": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.input.USE_EXISTING_BUILD",
                                "StringEquals": "False",
                                "Next": "Generate CSV files"
                            }
                        ],
                        "Default": "Validate Build"
                    },
                    "Generate CSV files": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::batch:submitJob.sync",
                        "ResultPath": null,
                        "Next": "Validate Build",
                        "Catch": [
                            {
                                "ErrorEquals": [
                                    "States.ALL"
                                ],
                                "Next": "Fail Build"
                            }
                        ],
                        "Parameters": {
                            "JobDefinition": "${BuildJobDefinition}",
                            "JobName": "${BuildJobName}",
                            "JobQueue": "${BuildJobQueue}",
                            "ContainerOverrides": {
                                "Environment": [
                                    {
                                        "Name": "RELEASES",
                                        "Value.$": "$.input.RELEASES"
                                    },
                                    {
                                        "Name": "ALIGN",
                                        "Value.$": "$.input.ALIGN"
                                    },
                                    {
                                        "Name": "KIR",
                                        "Value.$": "$.input.KIR"
                                    },
                                    {
                                        "Name": "MEM_PROFILE",
                                        "Value.$": "$.input.MEM_PROFILE"
                                    },
                                    {
                                        "Name": "LIMIT",
                                        "Value.$": "$.input.LIMIT"
                                    }
                                ]
                            }
                        }
                    },
                    "Validate Build": {
                        "Type": "Task",
                        "Resource": "${ValidateBuildOutputFunctionArn}",
                        "Parameters": {
                            "execution_id.$": "$$.Execution.Id",
                            "execution_start_time.$": "$$.Execution.StartTime",
                            "input.$": "$.input"
                        },
                        "Next": "Evaluate Payload"
                    },
                    "Evaluate Payload": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.is_valid_build",
                                "BooleanEquals": true,
                                "Next": "Pass Build"
                            }
                        ],
                        "Default": "Fail Build"
                    },
                    "Fail Build": {
                        "Type": "Pass",
                        "ResultPath": null,
                        "End": true
                    },
                    "Pass Build": {
                        "Type": "Pass",
                        "ResultPath": null,
                        "End": true
                    }
                }
            }
        },
        "Execution Failed": {
            "Type": "Fail",
            "Error": "ExecutionFailed",
            "Cause": "No valid payload was generated"
        },
        "Load Stage": {
            "Type": "Map",
            "Next": "Post-Execution Validation Query",
            "MaxConcurrency": 1,
            "ItemsPath": "$.validations.build",
            "ResultPath": null,
            "Iterator": {
                "StartAt": "Skip Load?",
                "States": {
                    "Skip Load?": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.input.SKIP_LOAD",
                                "StringEquals": "True",
                                "Next": "Skipped"
                            }
                        ],
                        "Default": "Load Data"
                    },
                    "Skipped": {
                        "Type": "Pass",
                        "ResultPath": null,
                        "End": true
                    },
                    "Load Data": {
                        "Type": "Parallel",
                        "ResultPath": null,
                        "End": true,
                        "Branches": [
                            {
                                "StartAt": "Invoke Load Script",
                                "States": {
                                    "Invoke Load Script": {
                                        "Type": "Task",
                                        "Resource": "${InvokeLoadScriptFunctionArn}",
                                        "InputPath": "$.input",
                                        "ResultPath": null,
                                        "End": true
                                    }
                                }
                            },
                            {
                                "StartAt": "Load GFEs",
                                "States": {
                                    "Load GFEs": {
                                        "Type": "Task",
                                        "Resource": "${LoadNeo4jActivityArn}",
                                        "HeartbeatSeconds": 60,
                                        "InputPath": "$.input",
                                        "ResultPath": null,
                                        "End": true,
                                        "Catch": [
                                            {
                                                "ErrorEquals": [
                                                    "States.ALL"
                                                ],
                                                "Next": "Fail Load"
                                            }
                                        ]
                                    },
                                    "Fail Load": {
                                        "Type": "Pass",
                                        "ResultPath": null,
                                        "End": true
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        },
        "Post-Execution Validation Query": {
            "Type": "Task",
            "Resource": "${ExecuteValidationQueriesFunctionArn}",
            "ResultPath": "$.validations.queries.post",
            "End": true
        }
    }
}