AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Deploys IAM, ECR repositories, AWS Batch Jobs and a State Machine for the gfe-db update pipeline

Parameters:
  Stage:
    Type: String
    Description: Stage of production
  AppName:
    Type: String
    Description: Application name
  InvokePipelineFunctionName:
    Type: String
  InvokePipelineFunctionMemorySize:
    Type: Number
    MinValue: 128
    MaxValue: 512
  InvokePipelineFunctionTimeout:
    Type: Number
  InvokePipelineFunctionSchedule:
    Type: String
  GitHubRepositoryOwner: 
    Type: String
  GitHubRepositoryName:
    Type: String
  PipelineStatePath:
    Type: String
  PipelineParamsPath:
    Type: String
  InvokeLoadScriptFunctionName:
    Type: String
  ECRBaseUri:
    Type: String
  BuildServiceRepositoryName:
    Type: String

Resources:
  BuildServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Stage}-${AppName}-build-server-sg'
      GroupDescription: !Sub 'Security group for the ${Stage}-${AppName} build server'
      VpcId: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/VpcID}}'
      # SecurityGroupIngress: # Uncomment to allow SSH access to build instance
      #   - CidrIp: 0.0.0.0/0
      #     FromPort: 22
      #     IpProtocol: tcp
      #     ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-${AppName}-build-server-sg'

  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
  BatchWorkerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BatchWorkerInstanceRole
  BatchWorkerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: !Sub '${Stage}-${AppName}-ECS-CloudWatchLogs'
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Effect: "Allow"
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: !Sub '${Stage}-${AppName}-BuildServiceS3ReadWritePolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketLocation"
                  - "s3:GetObjectVersion"
                  - "s3:GetLifecycleConfiguration"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutLifecycleConfiguration"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}'
                  - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}/*'
        - PolicyName: !Sub '${Stage}-${AppName}-SecretsPolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                  - "secretsmanager:ListSecrets"
                Resource: 
                  - "*"
        - PolicyName: !Sub '${Stage}-${AppName}-SQSPolicy'
          PolicyDocument:
            Version: '2012-10-17' 
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:GetQueueAttributes"
                  - "sqs:SendMessageBatch"
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                Resource:
                  - !GetAtt FailedAllelesQueue.Arn

  BuildJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: !Sub '${Stage}-${AppName}-BuildJobDefinition'
      ContainerProperties:
        Image: !Sub '${ECRBaseUri}/${BuildServiceRepositoryName}:latest'
        Vcpus: 8
        # TODO: Move Memory param to ResourceRequirements
        Memory: 8000 # Keep this around half the available RAM to avoid getting stuck in RUNNABLE status 
        Command:
          - bash
          - run.sh
        Environment:
          - Name: GFE_BUCKET
            Value: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketName}}'
          - Name: FAILED_ALLELES_QUEUE
            Value: !Ref FailedAllelesQueue
          - Name: AWS_REGION
            Value: !Ref AWS::Region
      RetryStrategy:
        Attempts: 1

  BuildJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub '${Stage}-${AppName}-BuildJobQueue'
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BuildComputeEnvironment

  BuildComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        Type: EC2
        # # Testing only, comment before prouction deployment
        # Ec2KeyPair: !Ref EC2KeyPairName
        # #
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 32
        InstanceTypes:
          - c5d.2xlarge
        Subnets:
          - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/PublicSubnetID}}'
        SecurityGroupIds:
          - !Ref BuildServerSG
        InstanceRole: !Ref BatchWorkerInstanceProfile
        LaunchTemplate:
          LaunchTemplateId: !Ref BuildLaunchTemplate
        Tags: { "Name": "gfe-db-build-worker" }
      ServiceRole: !GetAtt BatchServiceRole.Arn

  BuildLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        DisableApiTermination: false
        InstanceInitiatedShutdownBehavior: stop
        ImageId: '{{resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id}}'
        InstanceType: c5d.xlarge
        IamInstanceProfile:
          Name: !Ref BatchWorkerInstanceProfile
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref BuildServerSG
        UserData:
          Fn::Base64: |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

            --==MYBOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"

            #!/bin/bash -x
            IDX=1
            for DEV in /dev/disk/by-id/nvme-Amazon_EC2_NVMe_Instance_Storage_*-ns-1; do
              mkfs.xfs ${DEV}
              mkdir -p /local${IDX}
              echo ${DEV} /local${IDX} xfs defaults,noatime 1 2 >> /etc/fstab
              IDX=$((${IDX} + 1))
            done
            mount -a
            sudo yum update -y
            sudo yum install amazon-cloudwatch-agent -y

            --==MYBOUNDARY==
      TagSpecifications:
        - ResourceType: launch-template
          Tags: 
            - Key: Name
              Value: 'gfe-db-build-worker'

  BatchTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub '${Stage}-${AppName}-ecsTaskExecutionRolePolicy'
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: !Sub '${Stage}-${AppName}-BatchTaskExecutionPolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "ssm:GetParameters"
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                  - "secretsmanager:ListSecrets"
                Resource: 
                  - "*"
                  
  BuildServiceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref BuildServiceRepositoryName
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowPushPull"
            Effect: "Allow"
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${BatchWorkerInstanceRole}'
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"

  BuildServiceRepositoryNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/BuildServiceRepositoryName'
      Description: "Name of gfe-db build service repository"
      Value: !Ref BuildServiceRepositoryName

  InvokePipelineFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref InvokePipelineFunctionName
      Description: !Sub '${AppName} update pipeline trigger: checks for new IMGT/HLA releases and starts the loading process'
      CodeUri: functions/invoke_pipeline/src/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: !Ref InvokePipelineFunctionMemorySize
      Timeout: !Ref InvokePipelineFunctionTimeout
      Architectures:
        - x86_64
      Environment:
        Variables:
          GITHUB_PERSONAL_ACCESS_TOKEN: !Sub '{{resolve:secretsmanager:${AppName}-${Stage}-GitHubPersonalAccessToken:SecretString:personal_access_token:AWSCURRENT}}'
          GITHUB_REPOSITORY_OWNER: !Ref GitHubRepositoryOwner
          GITHUB_REPOSITORY_NAME: !Ref GitHubRepositoryName
          GFE_BUCKET: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketName}}'
          UPDATE_PIPELINE_STATE_MACHINE_ARN: !GetAtt UpdatePipelineStateMachine.Arn
          PIPELINE_STATE_PATH: !Ref PipelineStatePath
          PIPELINE_PARAMS_PATH: !Ref PipelineParamsPath
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: !Ref InvokePipelineFunctionSchedule
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Sid: "AllowS3Access"
              Effect: "Allow"
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:ListBucket"
              Resource:
                - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}'
                - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}/*'
            - Sid: "AllowSFNStartExecution"
              Effect: "Allow"
              Action:
                - "states:StartExecution"
              Resource: !GetAtt UpdatePipelineStateMachine.Arn

  # TODO add logs group and specify in command invocation
  InvokeLoadScriptFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref InvokeLoadScriptFunctionName
      Description: !Sub "Invoke server-side loading on Neo4j for ${AppName}"
      CodeUri: functions/invoke_load_script/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 256
      Timeout: 60
      Architectures:
        - x86_64
      Environment:
        Variables:
          NEO4J_LOAD_QUERY_DOCUMENT_NAME: !Ref Neo4jLoadQueryDocument
          NEO4J_DATABASE_INSTANCE_ID_SSM_PARAM: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseInstanceId'
          LOAD_NEO4J_ACTIVITY: !Ref LoadNeo4jActivity
          APP_NAME: !Ref AppName
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: 
                - "ssm:SendCommand"
                - "ssm:GetDocument"
              Resource:
                - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${Neo4jLoadQueryDocument}'
                - !Sub 'arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
            - Effect: "Allow"
              Action: 
                - "ssm:GetParameters"
                - "ssm:GetParameter"
              Resource: 
                - "*"

  UpdatePipelineStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      # RoleArn: !GetAtt UpdatePipelineExecutionRole.Arn # Replace with Policies
      DefinitionUri: statemachines/pipeline.asl.json
      DefinitionSubstitutions:
        AppName: !Ref AppName
        BuildJobDefinition: !Ref BuildJobDefinition
        BuildJobName: !Sub '${Stage}-${AppName}-build-job'
        BuildJobQueue: !Ref BuildJobQueue
        InvokeLoadScriptFunctionArn: !GetAtt InvokeLoadScriptFunction.Arn
        LoadNeo4jActivityArn: !Ref LoadNeo4jActivity
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref InvokeLoadScriptFunction
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "logs:CreateLogDelivery"
                - "logs:GetLogDelivery"
                - "logs:UpdateLogDelivery"
                - "logs:DeleteLogDelivery"
                - "logs:ListLogDeliveries"
                - "logs:PutResourcePolicy"
                - "logs:DescribeResourcePolicies"
                - "logs:DescribeLogGroups"
              Resource: 
                - "*"
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: 
                - "batch:SubmitJob"
                - "batch:DescribeJobs"
                - "batch:TerminateJob"
              Resource: "*"
            - Effect: "Allow"
              Action: 
                - "events:PutTargets"
                - "events:PutRule"
                - "events:DescribeRule"
              Resource: 
                - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule'
      Logging:
        Destinations: 
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt UpdatePipelineLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL

  UpdatePipelineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${Stage}-${AppName}-pipeline-execution-logs"

  UpdatePipelineArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/UpdatePipelineArn'
      Description: "ARN of gfe-db update pipeline state machine"
      Value: !GetAtt UpdatePipelineStateMachine.Arn

  # Testing purposes only
  TestActivityTask:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/test-activity.asl.json
      DefinitionSubstitutions:
        InvokeLoadScriptFunctionArn: !GetAtt InvokeLoadScriptFunction.Arn
        LoadNeo4jActivityArn: !Ref LoadNeo4jActivity
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref InvokeLoadScriptFunction

  LoadNeo4jActivity:
    Type: AWS::StepFunctions::Activity
    Properties: 
      Name: !Sub "${AppName}-${Stage}-load-Neo4j"

  FailedAllelesQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FailedAllelesDeadLetterQueue.Arn
        maxReceiveCount: 5
  FailedAllelesDeadLetterQueue:
    Type: AWS::SQS::Queue

  Neo4jLoadQueryDocument: 
    Type: AWS::SSM::Document
    Properties:
      DocumentType: "Command"
      DocumentFormat: "YAML"
      TargetType: "/AWS::EC2::Instance"
      Content:
        schemaVersion: "2.2"
        description: !Sub "Load Neo4j for ${AppName}"
        parameters:
          sourceType:
            type: "String"
            description: "S3"
            default: "S3"
          sourceInfo:
            type: "StringMap"
            description: !Sub "Downloads all files under the ${AppName} scripts prefix"
            default:
              path: !Sub 'https://{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketName}}.s3.amazonaws.com/config/scripts/'
          commandLine:
            type: "String"
            description: "These commands are invoked by a Lambda script which sets the correct parameters (Refer to documentation)."
            default: 'bash start_task.sh'
          workingDirectory:
            type: "String"
            description: "Working directory"
            default: "/home/ubuntu"
          executionTimeout:
            type: "String"
            description: "(Optional) The time in seconds for a command to complete before it is considered to have failed. Default is 3600 (1 hour). Maximum is 28800 (8 hours)."
            default: "86400"
        mainSteps:
          - action: "aws:downloadContent"
            name: "downloadContent"
            inputs:
              sourceType: "{{ sourceType }}"
              sourceInfo: "{{ sourceInfo }}"
              destinationPath: "{{ workingDirectory }}"
          - action: "aws:runShellScript"
            name: "runShellScript"
            inputs: 
              runCommand:
                - ""
                - "directory=$(pwd)"
                - "export PATH=$PATH:$directory"
                - " {{ commandLine }} " 
                - ""
              workingDirectory: "{{ workingDirectory }}"
              timeoutSeconds: "{{ executionTimeout }}"
