AWSTemplateFormatVersion: 2010-09-09
Description: Deploys an EC2 instance hosting the gfe-db Neo4j server

Parameters:

  Stage:
    Type: String
    Description: Stage of production
  AppName:
    Type: String
    Description: Application name
  DataBucketName:
    Type: String
  Neo4jAmiId:
    Type: String #AWS::EC2::Image::Id
    # Default: ami-0e1324ddfc4d086bb
    Description: AMI ID for Neo4j Community edition from AWS Marketplace
  Neo4jPassword:
    Type: String
    NoEcho: true
  Neo4jInitScript:
    Type: String
    Default: init_db.cyp
  DatabaseVolumeSize:
    Type: String
  HostedZoneId:
    Type: String

# TODO: add map of accepted instances for Neo4j CE AMI

Resources:
  Neo4jDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Stage}-${AppName}-neo4j-sg'
      GroupDescription: Security group for the GFE database
      VpcId: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/VpcID}}'
      SecurityGroupIngress:
        # - CidrIp: 0.0.0.0/0
        #   FromPort: 80
        #   IpProtocol: tcp
        #   ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        # - CidrIp: 0.0.0.0/0
        #   FromPort: 7474
        #   IpProtocol: tcp
        #   ToPort: 7474
        - CidrIp: 0.0.0.0/0
          FromPort: 7473
          IpProtocol: tcp
          ToPort: 7473
        - CidrIp: 0.0.0.0/0
          FromPort: 7687
          IpProtocol: tcp
          ToPort: 7687
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-${AppName}-neo4j-sg'
  
  Neo4jDatabaseInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      KeyName: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/EC2KeyPairName}}'
      DisableApiTermination: false
      ImageId: !Ref Neo4jAmiId
      InstanceType: m5.xlarge
      IamInstanceProfile: !Ref Neo4jDatabaseInstanceProfile
      Monitoring: true
      BlockDeviceMappings: 
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref DatabaseVolumeSize
            VolumeType: "gp3"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref Neo4jDatabaseSecurityGroup
          SubnetId: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/PublicSubnetID}}'
      UserData:
        Fn::Base64: 
          !Sub |
          #!/bin/bash -x
          apt-get update -y
          apt-get upgrade -y
          apt-get install -y \
            -o Dpkg::Options::='--force-confdef' \
            -o Dpkg::Options::='--force-confold' \
            apt-transport-https \
            ca-certificates \
            curl \
            software-properties-common \
            zip \
            unzip \
            collectd \
            python3-setuptools
          mkdir -p /tmp/ssm /tmp/amazon-cloudwatch-agent /tmp/cfn /tmp/logs
          # Install CloudFormation helper scripts (for cfn-signal)
          wget -q -O /tmp/cfn/aws-cfn-bootstrap-py3-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin /tmp/cfn/aws-cfn-bootstrap-py3-latest.tar.gz
          # Install SSM Agent for automation
          wget -q -O /tmp/ssm/amazon-ssm-agent.deb https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
          sudo dpkg -i /tmp/ssm/amazon-ssm-agent.deb
          sudo systemctl enable amazon-ssm-agent
          # Install and configure CloudWatch Agent for logs and metrics
          wget -q -O /tmp/amazon-cloudwatch-agent/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/debian/amd64/latest/amazon-cloudwatch-agent.deb
          dpkg -i -E /tmp/amazon-cloudwatch-agent/amazon-cloudwatch-agent.deb
          aws s3 cp s3://${DataBucketName}/config/amazon-cloudwatch-agent/amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          systemctl enable amazon-cloudwatch-agent.service
          service amazon-cloudwatch-agent start
          # Configure Neo4j server
          mkdir -p /opt/bitnami/neo4j/certificates/https /opt/bitnami/neo4j/certificates/bolt
          # echo "Downloading Neo4j configuration from ${DataBucketName} to /etc/neo4j/neo4j.template..."
          # aws s3 cp s3://${DataBucketName}/config/neo4j/neo4j.template /etc/neo4j/neo4j.template
          # echo "Downloading APOC Full plugin..."
          # curl -L https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/4.4.0.3/apoc-4.4.0.3-all.jar -O
          # mv apoc-4.4.0.3-all.jar /var/lib/neo4j/plugins/apoc-4.4.0.3-all.jar
          # echo "Downloading Neo4j Graph Data Science plugin..."
          # curl -L https://graphdatascience.ninja/neo4j-graph-data-science-2.0.1.zip -O
          # unzip neo4j-graph-data-science-2.0.1.zip
          # mv neo4j-graph-data-science-2.0.1.jar /var/lib/neo4j/plugins/neo4j-graph-data-science-2.0.1.jar
          # echo "Resetting default password..."
          # Stop Neo4j & Reset password
          # /opt/bitnami/ctlscript.sh stop neo4j
          # /opt/bitnami/neo4j/bin/neo4j-admin set-initial-password ${Neo4jPassword}
          # echo "Restarting Neo4j server..."
          # sudo /opt/bitnami/ctlscript.sh start neo4j
          # systemctl enable neo4j.service
          # systemctl start neo4j
          until $(curl --output /dev/null --silent --head --fail http://localhost:7474) ; do \
          printf '.' ; \
          sleep 1 ; \
          done
          printf "%s\n" " "
          echo "Neo4j is ready"
          # mkdir -p /var/lib/neo4j/backups /var/lib/neo4j/cypher
          # echo "Fetching cypher scripts from S3..."
          # aws s3 cp --recursive s3://${DataBucketName}/config/neo4j/cypher/ /var/lib/neo4j/cypher/
          # cat /var/lib/neo4j/cypher/${Neo4jInitScript} | \
          # /usr/bin/cypher-shell \
          #   -u neo4j \
          #   -p ${Neo4jPassword}
          echo "Copying logs to S3..."
          export INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)
          journalctl -b > /tmp/logs/$INSTANCE_ID-boot.log
          echo "Copying Neo4j logs to S3..."
          journalctl -e -u neo4j > /tmp/logs/neo4j.log
          aws s3 cp --recursive /tmp/logs/ s3://${DataBucketName}/logs/database/bootstrap/$(date +'%Y/%m/%d/%H')/
          # Signal the status from cfn-init; Ideally the UserData is run using cfn-init, and the exit code of cfn-init is passed to cfn-signal indicating
          # successful deployment
          /opt/aws/bin/cfn-signal \
            --exit-code $? \
            --stack  ${AWS::StackName} \
            --resource Neo4jDatabaseInstance \
            --region  ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Ref AppName
        - Key: Stage
          Value: !Ref Stage
  
  Neo4jDatabaseInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      Policies:
        - PolicyName: !Sub '${Stage}-${AppName}-Neo4jDatabasePolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectAcl"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:GetEncryptionConfiguration"
                Resource: 
                  - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}'
                  - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}/*'
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                  - "secretsmanager:ListSecrets"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action: 
                  - "states:GetActivityTask"
                  - "states:SendTaskHeartbeat"
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource:
                  - "*"
  
  Neo4jDatabaseInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Neo4jDatabaseInstanceRole
  
  Neo4jDatabaseElasticIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref Neo4jDatabaseInstance
      AllocationId: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseEndpointAllocationId}}'

  Neo4jDatabaseInstanceIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseInstanceId'
      Description: "Instance ID for gfe-db Neo4j database instance"
      Value: !Ref Neo4jDatabaseInstance

  Neo4jBackupDocument: 
    Type: AWS::SSM::Document
    Properties:
      DocumentType: "Command"
      DocumentFormat: "YAML"
      TargetType: "/AWS::EC2::Instance"
      Content:
        schemaVersion: "2.2"
        description: "Neo4j to S3 backup"
        parameters:
          sourceType:
            type: "String"
            description: "(Required) Specify the source type."
            default: "S3"
          sourceInfo:
            type: "StringMap"
            description: "(Required) Specify the information required to access the resource from the source. If source type is GitHub, then you can specify any of the following: 'owner', 'repository', 'path', 'getOptions', 'tokenInfo'. If source type is S3, then you can specify 'path'."
            default:
              path: !Sub 'https://${DataBucketName}.s3.amazonaws.com/config/scripts/backup.sh'
          commandLine:
            type: "String"
            description: "(Required) Specify the command line to be executed. The following formats of commands can be run: 'pythonMainFile.py argument1 argument2', 'ansible-playbook -i \"localhost,\" -c local example.yml'"
            default: "backup.sh"
          workingDirectory:
            type: "String"
            description: "Working directory"
            default: "/home/ubuntu"
          executionTimeout:
            type: "String"
            description: "(Optional) The time in seconds for a command to complete before it is considered to have failed. Default is 3600 (1 hour). Maximum is 28800 (8 hours)."
            default: "86400"
        mainSteps:
          - action: "aws:downloadContent"
            name: "downloadContent"
            inputs:
              sourceType: "{{ sourceType }}"
              sourceInfo: "{{ sourceInfo }}"
              destinationPath: "{{ workingDirectory }}"
          - action: "aws:runShellScript"
            name: "runShellScript"
            inputs: 
              runCommand:
                - ""
                - "directory=$(pwd)"
                - "export PATH=$PATH:$directory"
                - " {{ commandLine }} " 
                - ""
              workingDirectory: "{{ workingDirectory }}"
              timeoutSeconds: "{{ executionTimeout }}"

  Neo4jBackupMaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Properties:
      AllowUnassociatedTargets: false
      Cutoff: 1
      Description: !Sub "${AppName} Neo4j backup maintenance window"
      Duration: 2
      Name: BackupNeo4jMaintenanceWindow
      Schedule: cron(0 0 ? * * *)
      ScheduleTimezone: US/Eastern

  Neo4jBackupMaintenanceWindowTask:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      Description: Backup a Neo4j instance
      CutoffBehavior: CONTINUE_TASK
      MaxConcurrency: 1
      MaxErrors: 1
      Priority: 0
      TaskType: RUN_COMMAND
      WindowId: !Ref Neo4jBackupMaintenanceWindow
      TaskArn: !Ref Neo4jBackupDocument
      Targets:
        - Key: WindowTargetIds
          Values:
            - !Ref Neo4jBackupMaintenanceWindowTarget

  Neo4jBackupMaintenanceWindowTarget:
    Type: AWS::SSM::MaintenanceWindowTarget
    Properties:
      ResourceType: INSTANCE
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref Neo4jDatabaseInstance
      WindowId: !Ref Neo4jBackupMaintenanceWindow

  Neo4jDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: !Sub 'DNS name for ${AppName} server'
      Name: !Sub '${AppName}.cloudftl.com'
      Type: A
      TTL: 300
      ResourceRecords:
      - !GetAtt Neo4jDatabaseInstance.PublicIp