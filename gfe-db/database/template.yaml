AWSTemplateFormatVersion: 2010-09-09
Description: Deploys an EC2 instance hosting the gfe-db Neo4j server

Parameters:

  Stage:
    Type: String
    Description: Stage of production
  AppName:
    Type: String
    Description: Application name
  DataBucketName:
    Type: String
  Neo4jAmiId:
    Type: String #AWS::EC2::Image::Id
    # Default: ami-0e1324ddfc4d086bb
    Description: AMI ID for Neo4j Community edition from AWS Marketplace
  DatabaseVolumeSize:
    Type: String
  HostDomain:
    Type: String
    AllowedPattern: '((^[a-z0-9-]{1,}\.[a-z]{1,}$)|^$)'
  Subdomain:
    Type: String
  AdminEmail:
    Type: String
  APOCVersion:
    Type: String
  GDSVersion:
    Type: String

Resources:

  Neo4jCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AppName}-${Stage}-Neo4jCredentials"
      Description: Must match the username/password specified in the Neo4j Dockerfile. Empty until the database is created.
      SecretString: '{"NEO4J_USERNAME":"","NEO4J_PASSWORD":""}'
      # TODO remove
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: AppName 
          Value: !Ref AppName

  Neo4jCredentialsSecretArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jCredentialsSecretArn'
      Description: "ARN for Neo4jCredentialsSecret"
      Value: !Ref Neo4jCredentialsSecret
      # TODO remove
      Tags:
        Stage: !Ref Stage
        AppName: !Ref AppName

  # Neo4jDatabaseSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: !Sub '${Stage}-${AppName}-neo4j-sg'
  #     GroupDescription: Security group for the GFE database
  #     VpcId: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/VpcID}}'
  #     SecurityGroupIngress:
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: 80
  #         IpProtocol: tcp
  #         ToPort: 80
  #         Description: HTTP access for SSL certificate creation (required)
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: 443
  #         IpProtocol: tcp
  #         ToPort: 443
  #         Description: HTTPs access (required)
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: 7474
  #         IpProtocol: tcp
  #         ToPort: 7474
  #         Description: Neo4j HTTP access (required)
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: 7473
  #         IpProtocol: tcp
  #         ToPort: 7473
  #         Description: Neo4j HTTPS access (required)
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: 7687
  #         IpProtocol: tcp
  #         ToPort: 7687
  #         Description: Neo4j Bolt driver access (required)
  #       # - CidrIp: 0.0.0.0/0
  #       #   FromPort: 22
  #       #   IpProtocol: tcp
  #       #   ToPort: 22
  #       #   Description: Update IP to use MyIP
  #     # TODO remove
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${Stage}-${AppName}-neo4j-sg'

  # Neo4jDatabaseSecurityGroupNameParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Type: String
  #     Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseSecurityGroupName'
  #     Description: "Name of the Neo4jDatabaseSecurityGroup"
  #     Value: !Ref Neo4jDatabaseSecurityGroup
  #     # TODO remove
  #     Tags:
  #       Stage: !Ref Stage
  #       AppName: !Ref AppName
  
  Neo4jDatabaseInstance:
    Type: AWS::EC2::Instance
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT10M
    Properties:
      KeyName: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/EC2KeyPairName}}'
      DisableApiTermination: false
      ImageId: !Ref Neo4jAmiId
      InstanceType: m5.large # m5.xlarge
      IamInstanceProfile: !Ref Neo4jDatabaseInstanceProfile
      Monitoring: true
      BlockDeviceMappings: 
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref DatabaseVolumeSize
            VolumeType: "gp3"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseSecurityGroupId}}'
          SubnetId: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/PrivateSubnetID}}'
      # TODO Create .venv for running Python tests
      UserData:
        Fn::Base64: 
          !Sub |
          #!/bin/bash -x
          apt-get update -y
          DEBIAN_FRONTEND=noninteractive apt-get upgrade -yq
          apt-get install -y \
          -o Dpkg::Options::='--force-confdef' \
          -o Dpkg::Options::='--force-confold' \
          apt-transport-https \
          ca-certificates \
          curl \
          jq \
          software-properties-common \
          zip \
          unzip \
          collectd \
          python3-setuptools \
          certbot \
          git \
          python3-pip \
          python3-venv
          export BITNAMI_HOME=/home/bitnami
          # CloudWatch Logs Agent
          mkdir -p /tmp/amazon-cloudwatch-agent
          wget -q -O /tmp/amazon-cloudwatch-agent/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/debian/amd64/latest/amazon-cloudwatch-agent.deb
          dpkg -i -E /tmp/amazon-cloudwatch-agent/amazon-cloudwatch-agent.deb
          aws s3 cp s3://${DataBucketName}/config/amazon-cloudwatch-agent/amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          systemctl enable amazon-cloudwatch-agent.service
          service amazon-cloudwatch-agent start
          # CloudFormation Helpers
          mkdir -p /tmp/cfn
          wget -q -O /tmp/cfn/aws-cfn-bootstrap-py3-latest.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin /tmp/cfn/aws-cfn-bootstrap-py3-latest.tar.gz
          # SSM Agent
          mkdir -p /tmp/ssm
          wget -q -O /tmp/ssm/amazon-ssm-agent.deb https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
          dpkg -i /tmp/ssm/amazon-ssm-agent.deb
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          # Permanently set application environment variables (these should never change for the duration of the deployment) # TODO: Move to Makefile target
          echo "STAGE=${Stage}" >> $BITNAMI_HOME/env.sh
          echo "APP_NAME=${AppName}" >> $BITNAMI_HOME/env.sh
          echo "AWS_REGION=${AWS::Region}" >> $BITNAMI_HOME/env.sh
          echo "DATA_BUCKET_NAME=${DataBucketName}" >> $BITNAMI_HOME/env.sh
          echo "HOST_DOMAIN=${HostDomain}" >> $BITNAMI_HOME/env.sh
          echo "SUBDOMAIN=${Subdomain}" >> $BITNAMI_HOME/env.sh
          echo "ADMIN_EMAIL=${AdminEmail}" >> $BITNAMI_HOME/env.sh
          echo "APOC_VERSION=${APOCVersion}" >> $BITNAMI_HOME/env.sh
          echo "GDS_VERSION=${GDSVersion}" >> $BITNAMI_HOME/env.sh
          echo "BITNAMI_HOME=/home/bitnami" >> $BITNAMI_HOME/env.sh
          echo "NEO4J_HOME=/opt/bitnami/neo4j" >> $BITNAMI_HOME/env.sh
          echo "BITNAMI_NEO4J=/bitnami/neo4j" >> $BITNAMI_HOME/env.sh
          # get the instance's private IP from instance metadata
          echo "PRIVATE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)" >> $BITNAMI_HOME/env.sh
          echo "NEO4J_CREDENTIALS_SECRET_ARN=${Neo4jCredentialsSecret}" >> $BITNAMI_HOME/env.sh
          echo "# Make application variables available" >> $BITNAMI_HOME/.bashrc
          echo "set -a && source /home/bitnami/env.sh && set +a" >> $BITNAMI_HOME/.bashrc
          # disable disruptive autoescaping in shells
          echo "shopt -s direxpand" >> $BITNAMI_HOME/.bashrc
          source $BITNAMI_HOME/.bashrc
          # Download Makefile from data bucket
          aws s3 cp --recursive s3://${DataBucketName}/config/scripts/ $BITNAMI_HOME/
          # cfn-signal
          /opt/aws/bin/cfn-signal \
            --exit-code $? \
            --stack  ${Stage}-${AppName}-database \
            --resource Neo4jDatabaseInstance \
            --region ${AWS::Region}
          # Bootstrap Neo4j 
          cd $BITNAMI_HOME && make neo4j
          # Copy logs to home dir for easy access
          mkdir logs
          sudo journalctl -b > logs/boot.log
          cat /opt/bitnami/neo4j/logs/neo4j.log > logs/neo4j.log
          cat /opt/bitnami/neo4j/logs/debug.log > logs/debug.log
      # TODO remove
      Tags:
        - Key: Name
          Value: !Sub '${AppName}-${Stage}'
        - Key: Stage
          Value: !Sub '${AppName}-${Stage}'
          
  Neo4jDatabaseInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      Policies:
        - PolicyName: !Sub '${Stage}-${AppName}-Neo4jDatabasePolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectAcl"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:GetEncryptionConfiguration"
                Resource: 
                  - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}'
                  - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}/*'
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:ListSecretVersionIds"
                  - "secretsmanager:ListSecrets"
                Resource: 
                  - "*"
              - Effect: "Allow"
                Action:
                  - "secretsmanager:UpdateSecret"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                Resource: 
                  - !Ref Neo4jCredentialsSecret
              - Effect: "Allow"
                Action: 
                  - "states:GetActivityTask"
                  - "states:SendTaskHeartbeat"
                  - "states:SendTaskSuccess"
                  - "states:SendTaskFailure"
                Resource:
                  - "*"
  
  Neo4jDatabaseInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Neo4jDatabaseInstanceRole
  
  # Neo4jDatabaseElasticIpAssociation:
  #   Type: AWS::EC2::EIPAssociation
  #   Properties:
  #     InstanceId: !Ref Neo4jDatabaseInstance
  #     AllocationId: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseEndpointAllocationId}}'

  Neo4jDatabaseInstanceIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseInstanceId'
      Description: "Instance ID for gfe-db Neo4j database instance"
      Value: !Ref Neo4jDatabaseInstance

  # Neo4jUriParameter:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Type: String
  #     Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jUri'
  #     Description: "Connection URI for Neo4j"
  #     # "https://${SUBDOMAIN}.${HOST_DOMAIN}:7473/browser/"
  #     Value: !Sub "https://${Subdomain}.${HostDomain}:7473/browser/"

  # TODO test from EC2 instance
  Neo4jUriParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jUri'
      Description: "Connection URI for Neo4j"
      # "https://${SUBDOMAIN}.${HOST_DOMAIN}:7473/browser/"
      Value: !Sub "https://${Neo4jDatabaseInstance.PrivateIp}"

  # TODO test from EC2 instance
  Neo4jPrivateIpParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jPrivateIp'
      Description: "Connection URI for Neo4j"
      # "https://${SUBDOMAIN}.${HOST_DOMAIN}:7473/browser/"
      Value: !Sub "${Neo4jDatabaseInstance.PrivateIp}"

  Neo4jBackupDocument: 
    Type: AWS::SSM::Document
    Properties:
      DocumentType: "Command"
      DocumentFormat: "YAML"
      TargetType: "/AWS::EC2::Instance"
      UpdateMethod: Replace
      Content:
        schemaVersion: "2.2"
        description: "Neo4j to S3 backup"
        parameters:
          commandLine:
            type: "String"
            description: "(Required) Specify the command line to be executed. The following formats of commands can be run: 'pythonMainFile.py argument1 argument2', 'ansible-playbook -i \"localhost,\" -c local example.yml'"
            default: "make neo4j.backup"
          workingDirectory:
            type: "String"
            description: "Working directory"
            default: "/home/bitnami"
        mainSteps:
          - action: "aws:runShellScript"
            name: "runShellScript"
            inputs: 
              runCommand:
                - "directory=$(pwd)"
                - "export PATH=$PATH:$directory"
                - "cd {{ workingDirectory }} && {{ commandLine }}"
                
  Neo4jBackupDocumentNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jBackupDocumentName'
      Description: "Name of SSM document for backing up Neo4j"
      Value: !Ref Neo4jBackupDocument

  Neo4jBackupMaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Properties:
      AllowUnassociatedTargets: false
      Cutoff: 0
      Description: !Sub "${AppName} Neo4j backup maintenance window"
      Duration: 1
      Name: BackupNeo4jMaintenanceWindow
      Schedule: cron(0 0 ? * * *)
      ScheduleTimezone: US/Central

  Neo4jBackupMaintenanceWindowIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jBackupMaintenanceWindowId'
      Description: "ID for Neo4jBackupMaintenanceWindow"
      Value: !Ref Neo4jBackupMaintenanceWindow

  Neo4jBackupMaintenanceWindowTask:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      Description: Backup a Neo4j instance
      CutoffBehavior: CONTINUE_TASK
      MaxConcurrency: 1
      MaxErrors: 1
      Priority: 0
      TaskType: RUN_COMMAND
      WindowId: !Ref Neo4jBackupMaintenanceWindow
      TaskArn: !Ref Neo4jBackupDocument
      Targets:
        - Key: WindowTargetIds
          Values:
            - !Ref Neo4jBackupMaintenanceWindowTarget

  Neo4jBackupMaintenanceWindowTarget:
    Type: AWS::SSM::MaintenanceWindowTarget
    Properties:
      ResourceType: INSTANCE
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref Neo4jDatabaseInstance
      WindowId: !Ref Neo4jBackupMaintenanceWindow
