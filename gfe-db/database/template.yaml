AWSTemplateFormatVersion: 2010-09-09
Description: Deploys an EC2 instance hosting the gfe-db Neo4j server

Parameters:
  Stage:
    Type: String
    Description: Stage of production
  AppName:
    Type: String
    Description: Application name
  Neo4jAmiId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for Neo4j Community edition from AWS Marketplace

Resources:
  Neo4jDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Stage}-${AppName}-neo4j-sg'
      GroupDescription: Security group for the GFE database
      VpcId: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/VpcID}}'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 7474
          IpProtocol: tcp
          ToPort: 7474
        - CidrIp: 0.0.0.0/0
          FromPort: 7473
          IpProtocol: tcp
          ToPort: 7473
        - CidrIp: 0.0.0.0/0
          FromPort: 7687
          IpProtocol: tcp
          ToPort: 7687
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-${AppName}-neo4j-sg'
  Neo4jDatabaseInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/EC2KeyPairName}}'
      DisableApiTermination: false
      ImageId: !Ref Neo4jAmiId
      InstanceType: r5.large # m5.xlarge # m5d.xlarge
      IamInstanceProfile: !Ref Neo4jDatabaseInstanceProfile
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref Neo4jDatabaseSecurityGroup
          SubnetId: !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/PublicSubnetID}}'
      UserData:
        Fn::Base64: 
          !Sub |
          #!/bin/bash -x
          apt-get update -y
          apt-get upgrade -y
          apt-get install apt-transport-https ca-certificates curl software-properties-common
          curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
          curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/AgentDependencies.tar.gz -O
          tar xvf AgentDependencies.tar.gz -C /tmp/
          python3 ./awslogs-agent-setup.py --region ${AWS::Region} --dependency-path /tmp/AgentDependencies
          service awslogs start
          systemctl enable neo4j.service
          systemctl start neo4j
          echo "Starting Neo4j..."
          until $(curl --output /dev/null --silent --head --fail http://localhost:7474) ; do \
            printf '.' ; \
            sleep 1 ; \
          done
          printf "%s\n" " "
          echo "Neo4j is ready :-)"
          mkdir -p /var/lib/neo4j/backups
          echo "Copying boot logs to S3..."
          journalctl -b > /tmp/logs/instance-boot.log
          echo "Copying Neo4j logs to S3..."
          journalctl -e -u neo4j > /tmp/logs/neo4j.log
          aws s3 cp --recursive /tmp/logs/ s3://$gfe_bucket/logs/bootstrap/$(date +'%Y/%m/%d/%H')/
          echo "Ready"
      Tags:
        - Key: Name
          Value: !Ref AppName
        - Key: Stage
          Value: !Ref Stage
  Neo4jDatabaseInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: /
      Policies:
        - PolicyName: !Sub '${Stage}-${AppName}-Neo4jDatabasePolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListObjectsV2"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource: 
                  - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}'
                  - !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/DataBucketArn}}/*'
              - Effect: "Allow"
                Action: 
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                  - "secretsmanager:ListSecrets"
                Resource: 
                  - "*"
  Neo4jDatabaseInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Neo4jDatabaseInstanceRole
  Neo4jDatabaseElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Neo4jDatabaseInstance
  Neo4jDatabaseEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseEndpoint'
      Description: "Endpoint for gfe-db build service repository"
      Value: !Ref Neo4jDatabaseElasticIp
  Neo4jDatabaseInstanceIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseInstanceId'
      Description: "Instance ID for gfe-db Neo4j database instance"
      Value: !Ref Neo4jDatabaseInstance
Outputs:
  Neo4jDatabaseElasticIp:
    Description: "Elastic IP for gfe-db Neo4j database instance"
    Value: !Ref Neo4jDatabaseElasticIp
    Export:
      Name: Neo4jDatabaseElasticIp