AWSTemplateFormatVersion: "2010-09-09"
Description: "gfe-db build service using AWS Batch"
Parameters:
  gfedbBuildImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-05c75efdc7843b54e
    Description: ECS Optimized Amazon Linux 2 AMI for us-east-1
  gfeVPC:
    Type: String
    Default: vpc-8a3d74f0
    Description: Default VPC
  gfeSubnet:
    Type: String
    Default: subnet-5c44793b
    Description: Public subnet with internet access
  gfeBucket:
    Type: String
    Default: <bucket name>
    Description: Bucket for data and logs
  # gfedbBuildServiceRepository:
  #   Type: String
  #   Default: gfe-db-build-service
  #   Description: ECR repository for build service
  # gfedbLoadServiceRepository:
  #   Type: String
  #   Default: gfe-db-load-service
  #   Description: ECR repository for load service
Resources:
  gfedbBuildSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: gfedb-build-server-sg
      GroupDescription: Security group for the GFE DB build server
      VpcId: !Ref gfeVPC
      # SecurityGroupIngress: # Uncomment to allow SSH access to build instance
      #   - CidrIp: 66.214.236.87/32
      #     FromPort: 22
      #     IpProtocol: tcp
      #     ToPort: 22
  gfedbLoadSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: gfedb-load-server-sg
      GroupDescription: Security group for the GFE DB build server
      VpcId: !Ref gfeVPC
      SecurityGroupIngress:
        - CidrIp: 66.214.236.87/32
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

  ### Permissions ###
  gfedbBatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: batch.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EcsInstanceRole
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ECS-CloudWatchLogs
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Effect: Allow
                Resource: arn:aws:logs:*:*:*"
        - PolicyName: gfeDBBuildServiceS3ReadWritePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:GetObjectVersion
                  - s3:GetLifecycleConfiguration
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutLifecycleConfiguration
                  - s3:DeleteObject
                Resource:
                  - arn:aws:s3:::gfe-db-4498
                  - arn:aws:s3:::gfe-db-4498/*

  ### Build gfe-db ###
  gfedbBuildJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: gfedbBuildJobDefinition
      ContainerProperties:
        Image: !Join
            - ""
            - - !Ref AWS::AccountId
              - .dkr.ecr.
              - !Ref AWS::Region
              - .amazonaws.com/
              - !Ref gfedbBuildServiceRepository
              - :latest
        Vcpus: 8
        Memory: 8000 # Keep this around half the available RAM to avoid getting stuck in RUNNABLE status 
        Command:
          - bash
          - run.sh
        Environment:
          - Name: GFE_BUCKET
            Value: !Ref gfeBucket
      RetryStrategy:
        Attempts: 1
  gfedbBuildJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: gfedbBuildJobQueue
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref gfedbBuildComputeEnvironment
  gfedbBuildComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 32
        InstanceTypes:
          - c5d.2xlarge
        Subnets:
          - !Ref gfeSubnet
        SecurityGroupIds:
          - !Ref gfedbBuildSG
        InstanceRole: !Ref IamInstanceProfile
        LaunchTemplate:
          LaunchTemplateId: !Ref gfedbBuildLaunchTemplate
      ServiceRole: !GetAtt gfedbBatchServiceRole.Arn
  gfedbBuildLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        DisableApiTermination: false
        InstanceInitiatedShutdownBehavior: stop
        ImageId: !Ref gfedbBuildImageId
        InstanceType: c5d.xlarge
        IamInstanceProfile:
          Name: !Ref IamInstanceProfile
        Monitoring:
          Enabled: true
        SecurityGroupIds:
          - !Ref gfedbBuildSG
        TagSpecifications:
          - ResourceType: instance
            Tags: 
              - Key: Name
                Value: gfe-db-build-service
        UserData:
          Fn::Base64: |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

            --==MYBOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"

            #!/bin/bash -x
            IDX=1
            for DEV in /dev/disk/by-id/nvme-Amazon_EC2_NVMe_Instance_Storage_*-ns-1; do
              mkfs.xfs ${DEV}
              mkdir -p /local${IDX}
              echo ${DEV} /local${IDX} xfs defaults,noatime 1 2 >> /etc/fstab
              IDX=$((${IDX} + 1))
            done
            mount -a
            sudo yum update -y
            sudo yum install amazon-cloudwatch-agent -y

            --==MYBOUNDARY==

  ### Load gfe-db ###
  gfedbLoadJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: gfedbLoadJobDefinition
      ContainerProperties:
        Image: !Join
            - ""
            - - !Ref AWS::AccountId
              - .dkr.ecr.
              - !Ref AWS::Region
              - .amazonaws.com/
              - !Ref gfedbLoadServiceRepository
              - :latest
        Vcpus: 2
        Memory: 4000
        Command:
          - bash
          - run.sh
        Environment:
          - Name: GFE_BUCKET
            Value: gfe-db-4498
          - Name: NEO4J_HOST
            Value: 44.192.54.30
          - Name: NEO4J_USERNAME
            Value: neo4j
          - Name: NEO4J_PASSWORD
            Value: gfedb
      RetryStrategy:
        Attempts: 1
  gfedbLoadJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: gfedbLoadJobQueue
      Priority: 1
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref gfedbLoadComputeEnvironment
  gfedbLoadComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      ComputeResources:
        Type: EC2
        MinvCpus: 0
        DesiredvCpus: 0
        MaxvCpus: 2
        InstanceTypes:
          - optimal
        Subnets:
          - !Ref gfeSubnet
        SecurityGroupIds:
          - !Ref gfedbLoadSG
        InstanceRole: !Ref IamInstanceProfile
        # LaunchTemplate:
        #   LaunchTemplateId: !Ref gfedbBuildLaunchTemplate
      ServiceRole: !GetAtt gfedbBatchServiceRole.Arn

### Orchestrate building and loading ###
  gfeDBPipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: gfeDBPipelineLogsPolicy
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
        - PolicyName: gfeDBPipelineBatchExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - batch:SubmitJob
                  - batch:DescribeJobs
                  - batch:TerminateJob
                Resource: "*"
              - Effect: Allow
                Action: 
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: 
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule
  gfedbBuildServiceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "gfe-db-build-service"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${EcsInstanceRole}
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
  gfedbLoadServiceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "gfedb-load-service"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${EcsInstanceRole}
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: gfe-db-pipeline
      RoleArn: !GetAtt gfeDBPipelineExecutionRole.Arn #
      DefinitionString: |-
        {
            "StartAt": "BUILD_GFE-DB",
            "States": {
                "BUILD_GFE-DB": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobDefinition": "gfedbBuildJobDefinition",
                        "JobName": "build-gfe-db",
                        "JobQueue": "gfedbBuildJobQueue",
                        "ContainerOverrides": {
                            "Environment": [
                                {
                                    "Name": "RELEASES",
                                    "Value.$": "$.params.environment.RELEASES"
                                },
                                {
                                    "Name": "ALIGN",
                                    "Value.$": "$.params.environment.ALIGN"
                                },
                                {
                                    "Name": "KIR",
                                    "Value.$": "$.params.environment.KIR"
                                },
                                {
                                    "Name": "MEM_PROFILE",
                                    "Value.$": "$.params.environment.MEM_PROFILE"
                                },
                                {
                                    "Name": "LIMIT",
                                    "Value.$": "$.params.environment.LIMIT"
                                }                        
                            ]
                        }
                    },
                    "Next": "LOAD_GFE-DB"
                },
                "LOAD_GFE-DB": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobDefinition": "gfedbLoadJobDefinition",
                        "JobName": "load-gfe-db",
                        "JobQueue": "gfedbLoadJobQueue",
                        "ContainerOverrides": {
                            "Environment": [
                                {
                                    "Name": "RELEASES",
                                    "Value.$": "$$.Execution.Input.params.environment.RELEASES"
                                }
                            ]
                        }
                    },
                    "End": true
                }
            }
        }
      LoggingConfiguration: 
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt gfeDBPipelineLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL
  gfeDBPipelineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: gfe-db-pipeline-execution-logs
Outputs:
  gfedbBuildComputeEnvironmentArn:
    Value: !Ref gfedbBuildComputeEnvironment
  gfedbBuildJobQueueArn:
    Value: !Ref gfedbBuildJobQueue
  gfedbBuildJobDefinitionArn:
    Value: !Ref gfedbBuildJobDefinition
  EcsInstanceRoleArn:
    Value: !GetAtt EcsInstanceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EcsInstanceRoleArn"
  WorkflowArn:
    Description: Workflow statemachine ARN
    Value: !Ref StateMachine
  WorkflowName:
    Description: Workflow statemachine Name
    Value: !GetAtt StateMachine.Name
  WorkflowInput:
    Description: Example input for workflow statemachine
    Value: |-
      {
          "params": {
              "environment": {
                  "RELEASES": "3410",
                  "ALIGN": "True",
                  "KIR": "False",
                  "MEM_PROFILE": "False",
                  "LIMIT": ""
              }
          }
      }