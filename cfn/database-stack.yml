AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a VPC with public subnet and EC2 instance hosting a Neo4j server
Parameters:
  Stage:
    Type: String
    Description: Stage of production
  AppName:
    Type: String
    Description: Application name
  EC2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair name for the GFE database
    NoEcho: true
  Neo4jDatabaseImageId:
    Type: AWS::EC2::Image::Id
  DataBucketArn: # Use SSM parameter instead; !Sub '{{resolve:ssm:/${AppName}/${Stage}/${AWS::Region}/shared/VARIABLE}}' etc
    Type: String
Mappings:
  # Neo4jAvailabilityZoneMap defines availability zones where an m5d.xlarge instance is available.
  Neo4jAvailabilityZoneMap:
    us-east-1:
      Neo4jAvailabilityZone: us-east-1a
    us-east-2:
      Neo4jAvailabilityZone: us-east-2a
    us-west-1:
      Neo4jAvailabilityZone: us-west-1a
    eu-central-1:
      Neo4jAvailabilityZone: eu-central-1a
    eu-west-1:
      Neo4jAvailabilityZone: eu-west-1a
    eu-west-2:
      Neo4jAvailabilityZone: eu-west-2a
    eu-west-3:
      Neo4jAvailabilityZone: eu-west-3a
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [Neo4jAvailabilityZoneMap, !Ref AWS::Region, Neo4jAvailabilityZone]
      MapPublicIpOnLaunch: true
  Neo4jDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Stage}-${AppName}-neo4j-sg'
      GroupDescription: Security group for the GFE database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 7474
          IpProtocol: tcp
          ToPort: 7474
        - CidrIp: 0.0.0.0/0
          FromPort: 7473
          IpProtocol: tcp
          ToPort: 7473
        - CidrIp: 0.0.0.0/0
          FromPort: 7687
          IpProtocol: tcp
          ToPort: 7687
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-${AppName}-neo4j-sg'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet
  Neo4jDatabaseInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref EC2KeyPairName
      DisableApiTermination: false
      ImageId: !Ref Neo4jDatabaseImageId
      InstanceType: m5d.xlarge
      IamInstanceProfile: !Ref Neo4jDatabaseInstanceProfile
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref Neo4jDatabaseSecurityGroup
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: |
          #!/bin/bash -x
          IDX=1
          for DEV in /dev/disk/by-id/nvme-Amazon_EC2_NVMe_Instance_Storage_*-ns-1; do
            mkfs.xfs ${DEV}
            mkdir -p /local${IDX}
            echo ${DEV} /local${IDX} xfs defaults,noatime 1 2 >> /etc/fstab
            IDX=$((${IDX} + 1))
          done
          mount -a
          sudo yum update -y
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip awscliv2.zip
          sudo yum install git amazon-cloudwatch-agent -y
          sudo amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          chkconfig docker on
          cd /local1
          chown -R ec2-user .
          git clone https://github.com/abk7777/gfe-db.git
          cd gfe-db
          git checkout fix/optimize-build
          docker build -t gfe-db .
          docker run -d --name gfe \
            -v "$(pwd)"/data/csv/:/var/lib/neo4j/import \
            -v "$(pwd)"/neo4j/plugins:/var/lib/neo4j/plugins \
            -v "$(pwd)"/neo4j/logs:/var/lib/neo4j/logs \
            -p 7474:7474 -p 7473:7473 \
            -p 7687:7687 gfe-db
      Tags:
        - Key: Name
          Value: !Ref AppName
        - Key: Stage
          Value: !Ref Stage
  Neo4jDatabaseIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: !Sub '${Stage}-${AppName}-Neo4jDatabasePolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListObjectsV2"
                Resource: 
                  - !Ref DataBucketArn
                  - !Sub ${DataBucketArn}/*
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                  - "cloudtrail:LookupEvents"
                Resource: "*"
  Neo4jDatabaseInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Neo4jDatabaseIAMRole
  Neo4jDatabaseEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub '/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseEndpoint'
      Description: "Endpoint for gfe-db build service repository"
      Value: !GetAtt Neo4jDatabaseInstance.PublicIp
Outputs:
  VPC:
    Description: Virtual Private Network for gfe-db
    Value: !Ref VPC
  PublicSubnet:
    Description: Public Subnet for gfe-db Neo4j server
    Value: !Ref PublicSubnet
  Neo4jDatabaseEndpoint:
    Description: Public DNS for SSH access into the gfe-db Neo4j server
    Value: !GetAtt Neo4jDatabaseInstance.PublicIp
